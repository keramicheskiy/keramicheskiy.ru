
services:
  web:
    build: ./web
    container_name: web
    expose:
      - "8000"
    volumes:
      - static-data:/web/static
    networks:
      - nginx_network
    environment:
      - ENVIRONMENT_FILE=.env.prod
    entrypoint: /entrypoint.sh


  redis:
    image: redis:7-alpine
    networks:
      - nginx_network
    expose:
      - "6379"

#  nginx:
#    image: nginx:latest
#    container_name: nginx
#    ports:
#      - "80:80"
#      - "443:443"
#    volumes:
#      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
#      - static-data:/web/static
#      - /etc/letsencrypt:/etc/letsencrypt    # Монтирование Let's Encrypt
#    restart: always
#    networks:
#      - nginx_network

volumes:
  static-data:
    external: true

networks:
  nginx_network:
    external: true




# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

